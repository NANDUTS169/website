<%- include("../../views/partials/admin/header") %>

<head>
   <link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css" rel="stylesheet">
</head>
<style>
   .error-message {
       color: red;
       display: none;
   }
   .thumbnails-container {
       display: flex;
       overflow-x: auto;
   }
   .thumbnail {
       margin-right: 10px;
       position: relative;
   }
   .thumbnail img {
       width: 50px;
       height: auto;
       object-fit: cover;
   }
   .remove-icon {
       position: absolute;
       top: -5px;
       right: -5px;
       background-color: rgba(255, 0, 0, 0.7);
       color: white;
       border-radius: 50%;
       width: 18px;
       height: 18px;
       text-align: center;
       line-height: 16px;
       cursor: pointer;
   }
   .image-preview {
       max-width: 100%;
       max-height: 200px;
       margin-bottom: 10px;
   }
   .image-cropper {
       display: none;
       margin-bottom: 20px;
   }
   .btn-publish {
       background-color: #4CAF50;
       color: white;
       border: none;
       padding: 10px 20px;
       cursor: pointer;
       transition: background-color 0.3s;
   }
   .btn-publish:hover {
       background-color: #45a049;
   }
</style>

<section class="content-main">
    <div class="row">
        <div class="col-9">
            <div class="content-header">
                <h2 class="content-title">Add New Product</h2>
            </div>
        </div>
        <div class="col-lg-6">
            <div class="card mb-4">
                <div class="card-body">
                    <form method="post" action="/admin/addProducts" enctype="multipart/form-data" id="productForm">
                        <!-- Product Name -->
                        <div class="mb-4">
                            <label for="product_name" class="form-label">Product Name</label>
                            <input type="text" placeholder="Type here" name="productName" class="form-control border" id="product_name">
                            <div id="productName-error" class="error-message"></div>
                        </div>
                        
                        <!-- Brand -->
                        <div class="col-lg-4 mb-4">
                            <label class="form-label">Brand</label>
                            <select class="form-select border" name="brand">
                                <% for(let i=0; i<brand.length; i++) { %>
                                    <option value="<%= brand[i].brandName %>">
                                        <%= brand[i].brandName %>
                                    </option>
                                <% } %>
                            </select>
                            <div id="brand-error" class="error-message"></div>
                        </div>
                        
                        <!-- Description -->
                        <div class="mb-4">
                            <label class="form-label">Full description</label>
                            <textarea placeholder="Type here" id="descriptionid" name="description" class="form-control border" rows="4"></textarea>
                            <div id="description-error" class="error-message"></div>
                        </div>
                        
                        <!-- Price, Sale Price, Quantity -->
                        <div class="row">
                            <div class="col-lg-4">
                                <div class="mb-4">
                                    <label class="form-label">Regular price</label>
                                    <input placeholder="$" name="regularPrice" type="text" class="form-control border">
                                    <div id="regularPrice-error" class="error-message"></div>
                                </div>
                            </div>
                            <div class="col-lg-4">
                                <div class="mb-4">
                                    <label class="form-label">Sale price</label>
                                    <input placeholder="$" name="salePrice" type="text" class="form-control border">
                                    <div id="salePrice-error" class="error-message"></div>
                                </div>
                            </div>
                            <div class="col-lg-4">
                                <div class="mb-4">
                                    <label class="form-label">Quantity</label>
                                    <input placeholder="" name="quantity" type="text" class="form-control border">
                                    <div id="quantity-error" class="error-message"></div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Color -->
                        <div class="row">
                            <div class="col-lg-4">
                                <div class="mb-4">
                                    <label class="form-label">Color</label>
                                    <input name="color" type="text" class="form-control border">
                                    <div id="color-error" class="error-message"></div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Category -->
                        <div class="card mb-4">
                            <div class="card-body">
                                <div class="row gx-2">
                                    <div class="col-sm-6 mb-3">
                                        <label class="form-label">Category</label>
                                        <select class="form-select border" style="width: 150px;" name="category">
                                            <% for(let i=0; i<cat.length; i++) { %>
                                                <option value="<%= cat[i].name %>">
                                                    <%= cat[i].name %>
                                                </option>    
                                            <% } %>
                                        </select>
                                        <div id="category-error" class="error-message"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    
                        <!-- Image Upload -->
                        <div class="card mb-2">
                            <div class="card-header">
                                <h4>Choose images</h4>
                            </div>
                            <div class="border row">
                                <div id="addedImagesContainer" class="thumbnails-container"></div>
                            </div>
                            
                            <% for(let i=1; i<=4; i++) { %>
                            <div class="row mb-3">
                                <div class="card-body">
                                    <img src="" alt="" id="imgView<%= i %>" class="image-preview">
                                    <input class="form-control" type="file" name="images" id="input<%= i %>" accept="image/png, image/jpeg, image/jpg">
                                    <% if(i === 1) { %>
                                    <div id="images-error" class="error-message"></div>
                                    <% } %>
                                </div>
                                <div class="image-cropper" id="cropperContainer<%= i %>">
                                    <img src="" id="croppedImg<%= i %>" alt="">
                                    <button type="button" id="saveButton<%= i %>" class="btn-sm btn-primary">Save</button>
                                </div>
                            </div>
                            <% } %>
                        </div>
                        
                        <!-- Submit Button -->
                        <div>
                            <button class="btn btn-md rounded font-sm hover-up btn-publish" type="button" id="publishButton">Publish</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</section>

<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>

<script>
// Global variables
const selectedImages = [];
let croppers = {};

// Initialize event listeners when DOM is loaded
document.addEventListener('DOMContentLoaded', function() {
    // Set up file input change listeners
    for (let i = 1; i <= 4; i++) {
        const inputElement = document.getElementById(`input${i}`);
        inputElement.addEventListener('change', function(event) {
            viewImage(event, i);
            if (i === 1) {
                handleFileSelect(event);
            }
        });
    }
    
    // Set up publish button click listener
    document.getElementById('publishButton').addEventListener('click', validateAndSubmit);
});

// Function to validate and submit the form
function validateAndSubmit() {
    if (validateForm()) {
        document.getElementById('productForm').submit();
    }
}

// Function to handle image preview and cropping
function viewImage(event, index) {
    const input = event.target;
    if (!input.files || !input.files[0]) return;
    
    const reader = new FileReader();
    reader.onload = function() {
        const dataURL = reader.result;
        const image = document.getElementById(`imgView${index}`);
        image.src = dataURL;
        
        // Destroy existing cropper if it exists
        if (croppers[index]) {
            croppers[index].destroy();
        }
        
        // Initialize new cropper
        croppers[index] = new Cropper(image, {
            aspectRatio: 1,
            viewMode: 1,
            guides: true,
            background: false,
            autoCropArea: 0.8,
            zoomable: true
        });

        // Show cropper container
        const cropperContainer = document.getElementById(`cropperContainer${index}`);
        cropperContainer.style.display = 'block';

        // Setup save button event
        const saveButton = document.getElementById(`saveButton${index}`);
        saveButton.addEventListener('click', function() {
            if (!croppers[index]) return;
            
            const croppedCanvas = croppers[index].getCroppedCanvas();
            const croppedImage = document.getElementById(`croppedImg${index}`);
            croppedImage.src = croppedCanvas.toDataURL('image/jpeg', 0.9);

            const timestamp = new Date().getTime();
            const fileName = `cropped-img-${timestamp}-${index}.png`;
            
            croppedCanvas.toBlob(blob => {
                const input = document.getElementById(`input${index}`);
                const imgFile = new File([blob], fileName, {type: 'image/png'});
                const fileList = new DataTransfer();
                fileList.items.add(imgFile);
                input.files = fileList.files;
            }, 'image/png');
        });
    };
    reader.readAsDataURL(input.files[0]);
}

// Function to handle thumbnail display
function handleFileSelect(event) {
    const addedImagesContainer = document.getElementById("addedImagesContainer");
    addedImagesContainer.innerHTML = "";
    const files = event.target.files;
    
    if (!files || files.length === 0) return;

    const file = files[0];
    selectedImages.push(file);
    
    const thumbnail = document.createElement("div");
    thumbnail.classList.add("thumbnail");

    const img = document.createElement("img");
    img.src = URL.createObjectURL(file);
    img.alt = "thumbnail";
    
    const removeIcon = document.createElement("span");
    removeIcon.classList.add("remove-icon");
    removeIcon.innerHTML = "&times;";
    removeIcon.addEventListener("click", function() {
        const index = selectedImages.indexOf(file);
        if (index !== -1) {
            selectedImages.splice(index, 1);
        }
        thumbnail.remove();
        
        // Clear the file input
        document.getElementById('input1').value = '';
    });

    thumbnail.appendChild(img);
    thumbnail.appendChild(removeIcon);
    addedImagesContainer.appendChild(thumbnail);
}

// Form validation function
function validateForm() {
    clearErrorMessages();
    let isValid = true;
    
    // Get form field values
    const name = document.getElementsByName('productName')[0].value;
    const description = document.getElementById('descriptionid').value;
    const price = document.getElementsByName('regularPrice')[0].value;
    const saleprice = document.getElementsByName('salePrice')[0].value;
    const color = document.getElementsByName('color')[0].value;
    const quantity = document.getElementsByName('quantity')[0].value;
    const images = document.getElementById('input1');

    // Validate product name
    if (name.trim() === "") {
        displayErrorMessage('productName-error', 'Please enter a product name.');
        isValid = false;
    } else if (!/^[a-zA-Z0-9\s]+$/.test(name.trim())) {
        displayErrorMessage('productName-error', 'Product name should contain only alphanumeric characters.');
        isValid = false;
    }
    
    // Validate description
    if (description.trim() === "") {
        displayErrorMessage('description-error', 'Please enter a product description.');
        isValid = false;
    }

    // Validate quantity
    if (quantity.trim() === "") {
        displayErrorMessage('quantity-error', 'Please enter a quantity.');
        isValid = false;
    } else if (isNaN(parseInt(quantity)) || parseInt(quantity) < 0) {
        displayErrorMessage('quantity-error', 'Please enter a valid non-negative quantity.');
        isValid = false;
    }

    // Validate regular price
    if (price.trim() === "") {
        displayErrorMessage('regularPrice-error', 'Please enter a regular price.');
        isValid = false;
    } else if (!/^\d+(\.\d{1,2})?$/.test(price) || parseFloat(price) < 0) {
        displayErrorMessage('regularPrice-error', 'Please enter a valid non-negative price.');
        isValid = false;
    }

    // Validate sale price if provided
    if (saleprice.trim() !== "") {
        if (!/^\d+(\.\d{1,2})?$/.test(saleprice) || parseFloat(saleprice) < 0) {
            displayErrorMessage('salePrice-error', 'Please enter a valid non-negative price.');
            isValid = false;
        } else if (parseFloat(price) <= parseFloat(saleprice)) {
            displayErrorMessage('salePrice-error', 'Sale price must be less than regular price.');
            isValid = false;
        }
    }

    // Validate color
    if (color.trim() === "") {
        displayErrorMessage('color-error', 'Please enter a color.');
        isValid = false;
    }

    // Validate image
    if (!images.files || images.files.length === 0) {
        displayErrorMessage("images-error", 'Please select at least one image.');
        isValid = false;
    }
    
    return isValid;
}

// Helper function to display error messages
function displayErrorMessage(elementId, message) {
    const errorElement = document.getElementById(elementId);
    if (errorElement) {
        errorElement.innerText = message;
        errorElement.style.display = "block";
    }
}

// Helper function to clear all error messages
function clearErrorMessages() {
    const errorElements = document.getElementsByClassName('error-message');
    Array.from(errorElements).forEach(element => {
        element.innerText = '';
        element.style.display = "none";
    });
}
</script>

<%- include("../../views/partials/admin/footer") %>